/* REPLACE ALL OCCURANCE OF '.timeline' WITH ELEMENTOR UNIQUE ID. */


/* Addressing the repeatative code */
.timeline *::before, .timeline *::after {
  content: "";
  position: absolute;
}

.timeline * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.timeline { /* Styles for entire timeline. */

  /* Typography */
  --ff-sans-mont: "Montserrat", sans-serif;

  /* Font size */
  --fs-description: 1.2rem;
  --fs-date: 1rem;

  /* Font weight */
  --fw-date: 500;
  --fw-description: normal;

  /* Colors */
  
  --clr-description: #5f5f5f;
  --clr-secondary: #3f3f3f; 
  --clr-error: rgb(255, 50, 50);
  --clr-border: #aaa;
  --clr-card-border: #c9c9c9;
  --clr-bg-white: #ffffff;

  /* IMAGE SIZE */
  --img-size: 20rem;

  margin: 0 auto;
  width: 100%;
  max-width: 92rem;
  border: .1rem solid var(--clr-border);
  font-family: var(--ff-sans-mont);
}

.timeline > * { /* All direct children of timeline. */
  width: 100%;
}

/* Styles for header and footer of timeline. */
.timeline .controls,
.timeline .tl-footer {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 4rem;
}

.timeline .controls {
  border-bottom: .1rem solid var(--clr-border);
}

.timeline .controls label {
  font-size: var(--fs-description);
  margin: 0 1rem;
}

.timeline .tl-footer.load p {
  width: 2rem;
  height: 2rem;
  border-radius: 1000px;
  background-color: transparent;
  border-right: .3rem solid var(--clr-secondary);
  animation: load 2000ms infinite linear;
}

.timeline .tl-footer.error p,
.timeline .tl-footer.message p {
  display: block;
  font-size: var(--fs-date);
  font-weight: 500;
  color: var(--clr-secondary);
}

.timeline .tl-footer.error p {
  color: var(--clr-error); 
}
/* End of styles for header and footer */

/* Styles for events container and event cards. */

.timeline .events { /* Events container */
  position: relative;
  margin-top: 2rem;
  overflow: hidden;

  --TM-lineHeight: 0%;
  --clr-line-hidden: #33333333;
  --clr-line-active: #333;
}

.timeline .events::before, .timeline .events::after { /* Vertical line styles. */
  width: .2rem;
  border-radius: 1rem;
  left: 50%;
  top: 0;
  z-index: -1;
}

.timeline .events::after { /* Greyed out vertical line. */
  height: 100%;
  background-color: var(--clr-line-hidden);
}

.timeline .events::before { /* Darkest vertical line. Height is calculated using JavaScript. */
  height: var(--TM-lineHeight);
  background-color: var(--clr-line-active);
  transition: height 300ms linear;
}

/* Individual event card styles. */
.card {
  display: flex;
  flex-direction: column;
  width: 50%;
  position: relative;
  padding: 0 6rem 0 1rem;
}

/* Alternate side: Move even positioned events to right side. */
.card.right {
  margin-top: -5%; /* Change, this is not the best way. */
  left: 50%;
  padding: 0 1rem 0 6rem;
}

.card::before { /* Circle on timeline next to each event card.*/
  width: .6rem;
  height: .6rem;
  border: .4rem solid var(--clr-line-hidden);
  border-radius: 1000px;
  top: 3.5rem;
  right: -.1rem;
  transform: translate(50%);
  background-color: var(--clr-bg-white);
  transition: border-color 300ms linear;
}
/* Right side event card should display circle on left side. */
.card.right::before {
  left: .1rem;
  transform: translate(-50%);
}

/* Change color of circle when event card is in view. */
.card.active::before {
  border-color: var(--clr-line-active);
}

/* Styles for invisible markers for each card on the timeline. */
.card span.marker {
  position: absolute;
  right: 0;
  width: 1px;
  height: 1px;
  opacity: 0;
}
.card.right span.marker { /* Not important. */
  left: 0;
}

.card .info { /* The content for cards i.e. date, description and images. */
  position: relative;
  width: 100%;
  height: 100%;
  min-height: 8rem;
  padding: 1rem 1.4rem;
  border: .1rem solid var(--clr-card-border);
  border-radius: .6rem;
  transform: translateX(-110%); /* For animation, entry from left side. */
}
.card.right .info { /* Right card should enter from right side. */
  transform: translateX(110%);
}

.card.active .info { /* Animate card when in view. */
  transform: translateX(0);
  transition: transform 400ms 200ms ease-in;
}

.card span { /* Styles for date. */
  display: block;
  color: var(--clr-secondary);
  font-size: var(--fs-date);
  font-weight: var(--fw-date);
  margin-bottom: .6rem;
}

.card .info img { /* Fit the image in available space. */
  width: 100%;
  object-fit: cover;
  max-height: var(--img-size);
}

.card .info p { /* Styles for description. */
  font-size: var(--fs-description);
  font-weight: var(--fw-description);
  color: var(--clr-description);
}

.card .info::after { /* Arrows pointing to circle on timeline. */
  width: 1.2rem;
  height: 1.2rem;
  border-top: .1rem solid var(--clr-card-border);
  border-right: .1rem solid var(--clr-card-border);
  top: 3.4rem;
  right: -.7rem;
  transform: rotate(45deg);
}

.card.right .info::after { /* For right side cards, change the direction of arrow.  */
  left: -.7rem;
  right: unset;
  transform: rotate(-135deg);
}

/* End of styles for events container and event cards. */

@keyframes load { /* Loading animation. */
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


@media only screen and (max-width: 900px) {
  .timeline .events::before, .timeline .events::after { /* Shift vertical line from center to start. */
    left: 2%;
  }
  .card { /* Make cards occupy full width. */
    width: 100%;
    padding: 0 1rem 0 6rem;
  }
  .card.right { /* Shift the right card from right to start. */
    left: 0;
    margin: .4rem 0;
  }
  .card::before { /* Left cards should now display circle on left side. */
    left: calc(2% + .1rem);
    transform: translate(-50%);
  }

  /* For right side cards, it won't inherit from .card::before because of specificity. */
  /* Previously it was ruled by the following selection.  */
  .card.right::before { /* Right side cards circle. */
    left: calc(2% + .1rem);
  }

  .card .info { /* Change the entry side of left cards. */
    transform: translateX(110%);
  }

  .card .info::after { /* Change the direction of left card's arrow. */
    left: -.7rem;
    transform: rotate(-135deg);
  } 

  .card span.marker { /* Not important. */
    left: 0;
  }

}

@media only screen and (max-width: 680px) {
  .timeline .events::before, .timeline .events::after { /* Moving the vertical line. */
    left: 3%;
  }

  .card, .card.card.right { /* Adjustments for all cards. */
    padding-left: 4rem;
  }

  .card::before, .card.right::before { /* Moving the circle of all cards. */
    left: calc(3% + .1rem);
  }
}

@media screen and (max-width: 200px) { /* At this width, don't show images. */
  .card .info img { display: none; }
}